<?php
class EMIO_Export_Excel extends EMIO_Export_Spreadsheet {
	
	public static $format = 'excel';
	public static $format_name = 'Excel';
	public static $ext = 'xlsx';
	public static $mime_type = array('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
	public static $recurring = false;
	
	/**
	 * Spreadsheet object used to generate Excel file.
	 * @var PhpOffice\PhpSpreadsheet\Spreadsheet
	 */
	public $spreadsheet;
	
	public function export_header_row( $header_row ){
		try{
			//add header
			$this->spreadsheet->getActiveSheet()->fromArray( $header_row, null, 'A'.$this->sheet_row_pointer );
			$this->sheet_row_pointer++;
			//maek it bold
			$last_column = $this->spreadsheet->getActiveSheet()->getHighestDataColumn();
			$this->spreadsheet->getActiveSheet()->getStyle("A1:".$last_column."1")->getFont()->setBold(true);
		} catch ( PhpOffice\PhpSpreadsheet\Exception $e ){
			return new WP_Error('excel-header-exception', $e->getMessage());
		}
		return true;
	}
	
	/**
	 * At the end of each loop, export the range of data to the sheet, update the sheet pointer and return true,
	 * parent function that called this one will log added records automatically.
	 * @return true|WP_Error|array
	 */
	public function export_rows(){
		//add range of data to spreadsheet
		try{
			$this->spreadsheet->getActiveSheet()->fromArray( $this->sheet_rows, null, 'A'.$this->sheet_row_pointer );
		} catch ( PhpOffice\PhpSpreadsheet\Exception $e ){
			return new WP_Error('excel-loop-end-exception', $e->getMessage());
		}
		//update sheet pointer
		$this->sheet_row_pointer +=  count($this->sheet_rows);
		//return true so that parent function will update logs automatically
		return true;
	}
	
	//We hook into start/done to open up output handle for subsequent fput functions
	
	public function export_start(){
		EMIO_Loader::libraries();
		try{
			// Create new Spreadsheet object
			$this->spreadsheet = new PhpOffice\PhpSpreadsheet\Spreadsheet();
			// Set document properties
			$user = new WP_User($this->user_id);
			$this->spreadsheet->getProperties()->setCreator( $user->user_nicename )
				->setLastModifiedBy( $user->user_nicename )
				->setTitle( $this->name )
				->setSubject( $this->name )
				->setDescription( __('Export file generated by Events Manager IO', 'events-manager-io') );
			$this->spreadsheet->setActiveSheetIndex(0)->setTitle('Simple');
		} catch ( PhpOffice\PhpSpreadsheet\Exception $e ){
			return new WP_Error('excel-export-start-exception', $e->getMessage());
		}
		return parent::export_start();
	}
	
	public function export_done(){
		try{
			$writer = PhpOffice\PhpSpreadsheet\IOFactory::createWriter($this->spreadsheet, ucfirst(static::$ext));
			$writer->save('php://output');
		} catch ( PhpOffice\PhpSpreadsheet\Exception $e ){
			return new WP_Error('excel-export-done-exception', $e->getMessage());
		}
		return parent::export_done();
	}
}
EMIO_Exports::register_format('EMIO_Export_Excel');